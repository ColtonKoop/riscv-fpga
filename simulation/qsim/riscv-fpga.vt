// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/31/2024 20:29:28"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    adder64
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module adder64_vlg_sample_tst(
	a,
	b,
	cin,
	sampler_tx
);
input [63:0] a;
input [63:0] b;
input  cin;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or cin)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module adder64_vlg_check_tst (
	cout,
	sum,
	sampler_rx
);
input  cout;
input [63:0] sum;
input sampler_rx;

reg  cout_expected;
reg [63:0] sum_expected;

reg  cout_prev;
reg [63:0] sum_prev;

reg  cout_expected_prev;
reg [63:0] sum_expected_prev;

reg  last_cout_exp;
reg [63:0] last_sum_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	cout_prev = cout;
	sum_prev = sum;
end

// update expected /o prevs

always @(trigger)
begin
	cout_expected_prev = cout_expected;
	sum_expected_prev = sum_expected;
end



// expected cout
initial
begin
	cout_expected = 1'bX;
end 
// expected sum[ 63 ]
initial
begin
	sum_expected[63] = 1'bX;
end 
// expected sum[ 62 ]
initial
begin
	sum_expected[62] = 1'bX;
end 
// expected sum[ 61 ]
initial
begin
	sum_expected[61] = 1'bX;
end 
// expected sum[ 60 ]
initial
begin
	sum_expected[60] = 1'bX;
end 
// expected sum[ 59 ]
initial
begin
	sum_expected[59] = 1'bX;
end 
// expected sum[ 58 ]
initial
begin
	sum_expected[58] = 1'bX;
end 
// expected sum[ 57 ]
initial
begin
	sum_expected[57] = 1'bX;
end 
// expected sum[ 56 ]
initial
begin
	sum_expected[56] = 1'bX;
end 
// expected sum[ 55 ]
initial
begin
	sum_expected[55] = 1'bX;
end 
// expected sum[ 54 ]
initial
begin
	sum_expected[54] = 1'bX;
end 
// expected sum[ 53 ]
initial
begin
	sum_expected[53] = 1'bX;
end 
// expected sum[ 52 ]
initial
begin
	sum_expected[52] = 1'bX;
end 
// expected sum[ 51 ]
initial
begin
	sum_expected[51] = 1'bX;
end 
// expected sum[ 50 ]
initial
begin
	sum_expected[50] = 1'bX;
end 
// expected sum[ 49 ]
initial
begin
	sum_expected[49] = 1'bX;
end 
// expected sum[ 48 ]
initial
begin
	sum_expected[48] = 1'bX;
end 
// expected sum[ 47 ]
initial
begin
	sum_expected[47] = 1'bX;
end 
// expected sum[ 46 ]
initial
begin
	sum_expected[46] = 1'bX;
end 
// expected sum[ 45 ]
initial
begin
	sum_expected[45] = 1'bX;
end 
// expected sum[ 44 ]
initial
begin
	sum_expected[44] = 1'bX;
end 
// expected sum[ 43 ]
initial
begin
	sum_expected[43] = 1'bX;
end 
// expected sum[ 42 ]
initial
begin
	sum_expected[42] = 1'bX;
end 
// expected sum[ 41 ]
initial
begin
	sum_expected[41] = 1'bX;
end 
// expected sum[ 40 ]
initial
begin
	sum_expected[40] = 1'bX;
end 
// expected sum[ 39 ]
initial
begin
	sum_expected[39] = 1'bX;
end 
// expected sum[ 38 ]
initial
begin
	sum_expected[38] = 1'bX;
end 
// expected sum[ 37 ]
initial
begin
	sum_expected[37] = 1'bX;
end 
// expected sum[ 36 ]
initial
begin
	sum_expected[36] = 1'bX;
end 
// expected sum[ 35 ]
initial
begin
	sum_expected[35] = 1'bX;
end 
// expected sum[ 34 ]
initial
begin
	sum_expected[34] = 1'bX;
end 
// expected sum[ 33 ]
initial
begin
	sum_expected[33] = 1'bX;
end 
// expected sum[ 32 ]
initial
begin
	sum_expected[32] = 1'bX;
end 
// expected sum[ 31 ]
initial
begin
	sum_expected[31] = 1'bX;
end 
// expected sum[ 30 ]
initial
begin
	sum_expected[30] = 1'bX;
end 
// expected sum[ 29 ]
initial
begin
	sum_expected[29] = 1'bX;
end 
// expected sum[ 28 ]
initial
begin
	sum_expected[28] = 1'bX;
end 
// expected sum[ 27 ]
initial
begin
	sum_expected[27] = 1'bX;
end 
// expected sum[ 26 ]
initial
begin
	sum_expected[26] = 1'bX;
end 
// expected sum[ 25 ]
initial
begin
	sum_expected[25] = 1'bX;
end 
// expected sum[ 24 ]
initial
begin
	sum_expected[24] = 1'bX;
end 
// expected sum[ 23 ]
initial
begin
	sum_expected[23] = 1'bX;
end 
// expected sum[ 22 ]
initial
begin
	sum_expected[22] = 1'bX;
end 
// expected sum[ 21 ]
initial
begin
	sum_expected[21] = 1'bX;
end 
// expected sum[ 20 ]
initial
begin
	sum_expected[20] = 1'bX;
end 
// expected sum[ 19 ]
initial
begin
	sum_expected[19] = 1'bX;
end 
// expected sum[ 18 ]
initial
begin
	sum_expected[18] = 1'bX;
end 
// expected sum[ 17 ]
initial
begin
	sum_expected[17] = 1'bX;
end 
// expected sum[ 16 ]
initial
begin
	sum_expected[16] = 1'bX;
end 
// expected sum[ 15 ]
initial
begin
	sum_expected[15] = 1'bX;
end 
// expected sum[ 14 ]
initial
begin
	sum_expected[14] = 1'bX;
end 
// expected sum[ 13 ]
initial
begin
	sum_expected[13] = 1'bX;
end 
// expected sum[ 12 ]
initial
begin
	sum_expected[12] = 1'bX;
end 
// expected sum[ 11 ]
initial
begin
	sum_expected[11] = 1'bX;
end 
// expected sum[ 10 ]
initial
begin
	sum_expected[10] = 1'bX;
end 
// expected sum[ 9 ]
initial
begin
	sum_expected[9] = 1'bX;
end 
// expected sum[ 8 ]
initial
begin
	sum_expected[8] = 1'bX;
end 
// expected sum[ 7 ]
initial
begin
	sum_expected[7] = 1'bX;
end 
// expected sum[ 6 ]
initial
begin
	sum_expected[6] = 1'bX;
end 
// expected sum[ 5 ]
initial
begin
	sum_expected[5] = 1'bX;
end 
// expected sum[ 4 ]
initial
begin
	sum_expected[4] = 1'bX;
end 
// expected sum[ 3 ]
initial
begin
	sum_expected[3] = 1'bX;
end 
// expected sum[ 2 ]
initial
begin
	sum_expected[2] = 1'bX;
end 
// expected sum[ 1 ]
initial
begin
	sum_expected[1] = 1'bX;
end 
// expected sum[ 0 ]
initial
begin
	sum_expected[0] = 1'bX;
end 
// generate trigger
always @(cout_expected or cout or sum_expected or sum)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cout = %b | expected sum = %b | ",cout_expected_prev,sum_expected_prev);
	$display("| real cout = %b | real sum = %b | ",cout_prev,sum_prev);
`endif
	if (
		( cout_expected_prev !== 1'bx ) && ( cout_prev !== cout_expected_prev )
		&& ((cout_expected_prev !== last_cout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cout_expected_prev);
		$display ("     Real value = %b", cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cout_exp = cout_expected_prev;
	end
	if (
		( sum_expected_prev[0] !== 1'bx ) && ( sum_prev[0] !== sum_expected_prev[0] )
		&& ((sum_expected_prev[0] !== last_sum_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[0] = sum_expected_prev[0];
	end
	if (
		( sum_expected_prev[1] !== 1'bx ) && ( sum_prev[1] !== sum_expected_prev[1] )
		&& ((sum_expected_prev[1] !== last_sum_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[1] = sum_expected_prev[1];
	end
	if (
		( sum_expected_prev[2] !== 1'bx ) && ( sum_prev[2] !== sum_expected_prev[2] )
		&& ((sum_expected_prev[2] !== last_sum_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[2] = sum_expected_prev[2];
	end
	if (
		( sum_expected_prev[3] !== 1'bx ) && ( sum_prev[3] !== sum_expected_prev[3] )
		&& ((sum_expected_prev[3] !== last_sum_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[3] = sum_expected_prev[3];
	end
	if (
		( sum_expected_prev[4] !== 1'bx ) && ( sum_prev[4] !== sum_expected_prev[4] )
		&& ((sum_expected_prev[4] !== last_sum_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[4] = sum_expected_prev[4];
	end
	if (
		( sum_expected_prev[5] !== 1'bx ) && ( sum_prev[5] !== sum_expected_prev[5] )
		&& ((sum_expected_prev[5] !== last_sum_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[5] = sum_expected_prev[5];
	end
	if (
		( sum_expected_prev[6] !== 1'bx ) && ( sum_prev[6] !== sum_expected_prev[6] )
		&& ((sum_expected_prev[6] !== last_sum_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[6] = sum_expected_prev[6];
	end
	if (
		( sum_expected_prev[7] !== 1'bx ) && ( sum_prev[7] !== sum_expected_prev[7] )
		&& ((sum_expected_prev[7] !== last_sum_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[7] = sum_expected_prev[7];
	end
	if (
		( sum_expected_prev[8] !== 1'bx ) && ( sum_prev[8] !== sum_expected_prev[8] )
		&& ((sum_expected_prev[8] !== last_sum_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[8] = sum_expected_prev[8];
	end
	if (
		( sum_expected_prev[9] !== 1'bx ) && ( sum_prev[9] !== sum_expected_prev[9] )
		&& ((sum_expected_prev[9] !== last_sum_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[9] = sum_expected_prev[9];
	end
	if (
		( sum_expected_prev[10] !== 1'bx ) && ( sum_prev[10] !== sum_expected_prev[10] )
		&& ((sum_expected_prev[10] !== last_sum_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[10] = sum_expected_prev[10];
	end
	if (
		( sum_expected_prev[11] !== 1'bx ) && ( sum_prev[11] !== sum_expected_prev[11] )
		&& ((sum_expected_prev[11] !== last_sum_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[11] = sum_expected_prev[11];
	end
	if (
		( sum_expected_prev[12] !== 1'bx ) && ( sum_prev[12] !== sum_expected_prev[12] )
		&& ((sum_expected_prev[12] !== last_sum_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[12] = sum_expected_prev[12];
	end
	if (
		( sum_expected_prev[13] !== 1'bx ) && ( sum_prev[13] !== sum_expected_prev[13] )
		&& ((sum_expected_prev[13] !== last_sum_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[13] = sum_expected_prev[13];
	end
	if (
		( sum_expected_prev[14] !== 1'bx ) && ( sum_prev[14] !== sum_expected_prev[14] )
		&& ((sum_expected_prev[14] !== last_sum_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[14] = sum_expected_prev[14];
	end
	if (
		( sum_expected_prev[15] !== 1'bx ) && ( sum_prev[15] !== sum_expected_prev[15] )
		&& ((sum_expected_prev[15] !== last_sum_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[15] = sum_expected_prev[15];
	end
	if (
		( sum_expected_prev[16] !== 1'bx ) && ( sum_prev[16] !== sum_expected_prev[16] )
		&& ((sum_expected_prev[16] !== last_sum_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[16] = sum_expected_prev[16];
	end
	if (
		( sum_expected_prev[17] !== 1'bx ) && ( sum_prev[17] !== sum_expected_prev[17] )
		&& ((sum_expected_prev[17] !== last_sum_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[17] = sum_expected_prev[17];
	end
	if (
		( sum_expected_prev[18] !== 1'bx ) && ( sum_prev[18] !== sum_expected_prev[18] )
		&& ((sum_expected_prev[18] !== last_sum_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[18] = sum_expected_prev[18];
	end
	if (
		( sum_expected_prev[19] !== 1'bx ) && ( sum_prev[19] !== sum_expected_prev[19] )
		&& ((sum_expected_prev[19] !== last_sum_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[19] = sum_expected_prev[19];
	end
	if (
		( sum_expected_prev[20] !== 1'bx ) && ( sum_prev[20] !== sum_expected_prev[20] )
		&& ((sum_expected_prev[20] !== last_sum_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[20] = sum_expected_prev[20];
	end
	if (
		( sum_expected_prev[21] !== 1'bx ) && ( sum_prev[21] !== sum_expected_prev[21] )
		&& ((sum_expected_prev[21] !== last_sum_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[21] = sum_expected_prev[21];
	end
	if (
		( sum_expected_prev[22] !== 1'bx ) && ( sum_prev[22] !== sum_expected_prev[22] )
		&& ((sum_expected_prev[22] !== last_sum_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[22] = sum_expected_prev[22];
	end
	if (
		( sum_expected_prev[23] !== 1'bx ) && ( sum_prev[23] !== sum_expected_prev[23] )
		&& ((sum_expected_prev[23] !== last_sum_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[23] = sum_expected_prev[23];
	end
	if (
		( sum_expected_prev[24] !== 1'bx ) && ( sum_prev[24] !== sum_expected_prev[24] )
		&& ((sum_expected_prev[24] !== last_sum_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[24] = sum_expected_prev[24];
	end
	if (
		( sum_expected_prev[25] !== 1'bx ) && ( sum_prev[25] !== sum_expected_prev[25] )
		&& ((sum_expected_prev[25] !== last_sum_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[25] = sum_expected_prev[25];
	end
	if (
		( sum_expected_prev[26] !== 1'bx ) && ( sum_prev[26] !== sum_expected_prev[26] )
		&& ((sum_expected_prev[26] !== last_sum_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[26] = sum_expected_prev[26];
	end
	if (
		( sum_expected_prev[27] !== 1'bx ) && ( sum_prev[27] !== sum_expected_prev[27] )
		&& ((sum_expected_prev[27] !== last_sum_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[27] = sum_expected_prev[27];
	end
	if (
		( sum_expected_prev[28] !== 1'bx ) && ( sum_prev[28] !== sum_expected_prev[28] )
		&& ((sum_expected_prev[28] !== last_sum_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[28] = sum_expected_prev[28];
	end
	if (
		( sum_expected_prev[29] !== 1'bx ) && ( sum_prev[29] !== sum_expected_prev[29] )
		&& ((sum_expected_prev[29] !== last_sum_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[29] = sum_expected_prev[29];
	end
	if (
		( sum_expected_prev[30] !== 1'bx ) && ( sum_prev[30] !== sum_expected_prev[30] )
		&& ((sum_expected_prev[30] !== last_sum_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[30] = sum_expected_prev[30];
	end
	if (
		( sum_expected_prev[31] !== 1'bx ) && ( sum_prev[31] !== sum_expected_prev[31] )
		&& ((sum_expected_prev[31] !== last_sum_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[31] = sum_expected_prev[31];
	end
	if (
		( sum_expected_prev[32] !== 1'bx ) && ( sum_prev[32] !== sum_expected_prev[32] )
		&& ((sum_expected_prev[32] !== last_sum_exp[32]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[32] = sum_expected_prev[32];
	end
	if (
		( sum_expected_prev[33] !== 1'bx ) && ( sum_prev[33] !== sum_expected_prev[33] )
		&& ((sum_expected_prev[33] !== last_sum_exp[33]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[33] = sum_expected_prev[33];
	end
	if (
		( sum_expected_prev[34] !== 1'bx ) && ( sum_prev[34] !== sum_expected_prev[34] )
		&& ((sum_expected_prev[34] !== last_sum_exp[34]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[34] = sum_expected_prev[34];
	end
	if (
		( sum_expected_prev[35] !== 1'bx ) && ( sum_prev[35] !== sum_expected_prev[35] )
		&& ((sum_expected_prev[35] !== last_sum_exp[35]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[35] = sum_expected_prev[35];
	end
	if (
		( sum_expected_prev[36] !== 1'bx ) && ( sum_prev[36] !== sum_expected_prev[36] )
		&& ((sum_expected_prev[36] !== last_sum_exp[36]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[36] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[36] = sum_expected_prev[36];
	end
	if (
		( sum_expected_prev[37] !== 1'bx ) && ( sum_prev[37] !== sum_expected_prev[37] )
		&& ((sum_expected_prev[37] !== last_sum_exp[37]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[37] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[37] = sum_expected_prev[37];
	end
	if (
		( sum_expected_prev[38] !== 1'bx ) && ( sum_prev[38] !== sum_expected_prev[38] )
		&& ((sum_expected_prev[38] !== last_sum_exp[38]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[38] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[38] = sum_expected_prev[38];
	end
	if (
		( sum_expected_prev[39] !== 1'bx ) && ( sum_prev[39] !== sum_expected_prev[39] )
		&& ((sum_expected_prev[39] !== last_sum_exp[39]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[39] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[39] = sum_expected_prev[39];
	end
	if (
		( sum_expected_prev[40] !== 1'bx ) && ( sum_prev[40] !== sum_expected_prev[40] )
		&& ((sum_expected_prev[40] !== last_sum_exp[40]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[40] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[40] = sum_expected_prev[40];
	end
	if (
		( sum_expected_prev[41] !== 1'bx ) && ( sum_prev[41] !== sum_expected_prev[41] )
		&& ((sum_expected_prev[41] !== last_sum_exp[41]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[41] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[41] = sum_expected_prev[41];
	end
	if (
		( sum_expected_prev[42] !== 1'bx ) && ( sum_prev[42] !== sum_expected_prev[42] )
		&& ((sum_expected_prev[42] !== last_sum_exp[42]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[42] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[42] = sum_expected_prev[42];
	end
	if (
		( sum_expected_prev[43] !== 1'bx ) && ( sum_prev[43] !== sum_expected_prev[43] )
		&& ((sum_expected_prev[43] !== last_sum_exp[43]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[43] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[43] = sum_expected_prev[43];
	end
	if (
		( sum_expected_prev[44] !== 1'bx ) && ( sum_prev[44] !== sum_expected_prev[44] )
		&& ((sum_expected_prev[44] !== last_sum_exp[44]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[44] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[44] = sum_expected_prev[44];
	end
	if (
		( sum_expected_prev[45] !== 1'bx ) && ( sum_prev[45] !== sum_expected_prev[45] )
		&& ((sum_expected_prev[45] !== last_sum_exp[45]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[45] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[45] = sum_expected_prev[45];
	end
	if (
		( sum_expected_prev[46] !== 1'bx ) && ( sum_prev[46] !== sum_expected_prev[46] )
		&& ((sum_expected_prev[46] !== last_sum_exp[46]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[46] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[46] = sum_expected_prev[46];
	end
	if (
		( sum_expected_prev[47] !== 1'bx ) && ( sum_prev[47] !== sum_expected_prev[47] )
		&& ((sum_expected_prev[47] !== last_sum_exp[47]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[47] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[47] = sum_expected_prev[47];
	end
	if (
		( sum_expected_prev[48] !== 1'bx ) && ( sum_prev[48] !== sum_expected_prev[48] )
		&& ((sum_expected_prev[48] !== last_sum_exp[48]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[48] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[48] = sum_expected_prev[48];
	end
	if (
		( sum_expected_prev[49] !== 1'bx ) && ( sum_prev[49] !== sum_expected_prev[49] )
		&& ((sum_expected_prev[49] !== last_sum_exp[49]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[49] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[49] = sum_expected_prev[49];
	end
	if (
		( sum_expected_prev[50] !== 1'bx ) && ( sum_prev[50] !== sum_expected_prev[50] )
		&& ((sum_expected_prev[50] !== last_sum_exp[50]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[50] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[50] = sum_expected_prev[50];
	end
	if (
		( sum_expected_prev[51] !== 1'bx ) && ( sum_prev[51] !== sum_expected_prev[51] )
		&& ((sum_expected_prev[51] !== last_sum_exp[51]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[51] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[51] = sum_expected_prev[51];
	end
	if (
		( sum_expected_prev[52] !== 1'bx ) && ( sum_prev[52] !== sum_expected_prev[52] )
		&& ((sum_expected_prev[52] !== last_sum_exp[52]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[52] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[52] = sum_expected_prev[52];
	end
	if (
		( sum_expected_prev[53] !== 1'bx ) && ( sum_prev[53] !== sum_expected_prev[53] )
		&& ((sum_expected_prev[53] !== last_sum_exp[53]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[53] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[53] = sum_expected_prev[53];
	end
	if (
		( sum_expected_prev[54] !== 1'bx ) && ( sum_prev[54] !== sum_expected_prev[54] )
		&& ((sum_expected_prev[54] !== last_sum_exp[54]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[54] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[54] = sum_expected_prev[54];
	end
	if (
		( sum_expected_prev[55] !== 1'bx ) && ( sum_prev[55] !== sum_expected_prev[55] )
		&& ((sum_expected_prev[55] !== last_sum_exp[55]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[55] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[55] = sum_expected_prev[55];
	end
	if (
		( sum_expected_prev[56] !== 1'bx ) && ( sum_prev[56] !== sum_expected_prev[56] )
		&& ((sum_expected_prev[56] !== last_sum_exp[56]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[56] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[56] = sum_expected_prev[56];
	end
	if (
		( sum_expected_prev[57] !== 1'bx ) && ( sum_prev[57] !== sum_expected_prev[57] )
		&& ((sum_expected_prev[57] !== last_sum_exp[57]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[57] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[57] = sum_expected_prev[57];
	end
	if (
		( sum_expected_prev[58] !== 1'bx ) && ( sum_prev[58] !== sum_expected_prev[58] )
		&& ((sum_expected_prev[58] !== last_sum_exp[58]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[58] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[58] = sum_expected_prev[58];
	end
	if (
		( sum_expected_prev[59] !== 1'bx ) && ( sum_prev[59] !== sum_expected_prev[59] )
		&& ((sum_expected_prev[59] !== last_sum_exp[59]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[59] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[59] = sum_expected_prev[59];
	end
	if (
		( sum_expected_prev[60] !== 1'bx ) && ( sum_prev[60] !== sum_expected_prev[60] )
		&& ((sum_expected_prev[60] !== last_sum_exp[60]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[60] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[60] = sum_expected_prev[60];
	end
	if (
		( sum_expected_prev[61] !== 1'bx ) && ( sum_prev[61] !== sum_expected_prev[61] )
		&& ((sum_expected_prev[61] !== last_sum_exp[61]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[61] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[61] = sum_expected_prev[61];
	end
	if (
		( sum_expected_prev[62] !== 1'bx ) && ( sum_prev[62] !== sum_expected_prev[62] )
		&& ((sum_expected_prev[62] !== last_sum_exp[62]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[62] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[62] = sum_expected_prev[62];
	end
	if (
		( sum_expected_prev[63] !== 1'bx ) && ( sum_prev[63] !== sum_expected_prev[63] )
		&& ((sum_expected_prev[63] !== last_sum_exp[63]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sum[63] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sum_expected_prev);
		$display ("     Real value = %b", sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sum_exp[63] = sum_expected_prev[63];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#800000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module adder64_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [63:0] a;
reg [63:0] b;
reg cin;
// wires                                               
wire cout;
wire [63:0] sum;

wire sampler;                             

// assign statements (if any)                          
adder64 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.cin(cin),
	.cout(cout),
	.sum(sum)
);
// a[ 63 ]
initial
begin
	a[63] = 1'b1;
	a[63] = #100000 1'b0;
end 
// a[ 62 ]
initial
begin
	a[62] = 1'b0;
end 
// a[ 61 ]
initial
begin
	a[61] = 1'b0;
end 
// a[ 60 ]
initial
begin
	a[60] = 1'b0;
end 
// a[ 59 ]
initial
begin
	a[59] = 1'b0;
end 
// a[ 58 ]
initial
begin
	a[58] = 1'b0;
end 
// a[ 57 ]
initial
begin
	a[57] = 1'b0;
end 
// a[ 56 ]
initial
begin
	a[56] = 1'b0;
end 
// a[ 55 ]
initial
begin
	a[55] = 1'b0;
end 
// a[ 54 ]
initial
begin
	a[54] = 1'b0;
end 
// a[ 53 ]
initial
begin
	a[53] = 1'b0;
end 
// a[ 52 ]
initial
begin
	a[52] = 1'b0;
end 
// a[ 51 ]
initial
begin
	a[51] = 1'b0;
end 
// a[ 50 ]
initial
begin
	a[50] = 1'b0;
end 
// a[ 49 ]
initial
begin
	a[49] = 1'b0;
end 
// a[ 48 ]
initial
begin
	a[48] = 1'b0;
end 
// a[ 47 ]
initial
begin
	a[47] = 1'b0;
end 
// a[ 46 ]
initial
begin
	a[46] = 1'b0;
end 
// a[ 45 ]
initial
begin
	a[45] = 1'b0;
end 
// a[ 44 ]
initial
begin
	a[44] = 1'b0;
end 
// a[ 43 ]
initial
begin
	a[43] = 1'b0;
end 
// a[ 42 ]
initial
begin
	a[42] = 1'b0;
end 
// a[ 41 ]
initial
begin
	a[41] = 1'b0;
end 
// a[ 40 ]
initial
begin
	a[40] = 1'b0;
end 
// a[ 39 ]
initial
begin
	a[39] = 1'b0;
end 
// a[ 38 ]
initial
begin
	a[38] = 1'b0;
end 
// a[ 37 ]
initial
begin
	a[37] = 1'b0;
end 
// a[ 36 ]
initial
begin
	a[36] = 1'b0;
end 
// a[ 35 ]
initial
begin
	a[35] = 1'b0;
end 
// a[ 34 ]
initial
begin
	a[34] = 1'b0;
end 
// a[ 33 ]
initial
begin
	a[33] = 1'b0;
end 
// a[ 32 ]
initial
begin
	a[32] = 1'b0;
end 
// a[ 31 ]
initial
begin
	a[31] = 1'b0;
end 
// a[ 30 ]
initial
begin
	a[30] = 1'b0;
end 
// a[ 29 ]
initial
begin
	a[29] = 1'b0;
end 
// a[ 28 ]
initial
begin
	a[28] = 1'b0;
end 
// a[ 27 ]
initial
begin
	a[27] = 1'b0;
end 
// a[ 26 ]
initial
begin
	a[26] = 1'b0;
end 
// a[ 25 ]
initial
begin
	a[25] = 1'b0;
end 
// a[ 24 ]
initial
begin
	a[24] = 1'b0;
end 
// a[ 23 ]
initial
begin
	a[23] = 1'b0;
end 
// a[ 22 ]
initial
begin
	a[22] = 1'b0;
end 
// a[ 21 ]
initial
begin
	a[21] = 1'b0;
end 
// a[ 20 ]
initial
begin
	a[20] = 1'b0;
end 
// a[ 19 ]
initial
begin
	a[19] = 1'b0;
end 
// a[ 18 ]
initial
begin
	a[18] = 1'b0;
end 
// a[ 17 ]
initial
begin
	a[17] = 1'b0;
end 
// a[ 16 ]
initial
begin
	a[16] = 1'b0;
end 
// a[ 15 ]
initial
begin
	a[15] = 1'b0;
end 
// a[ 14 ]
initial
begin
	a[14] = 1'b0;
end 
// a[ 13 ]
initial
begin
	a[13] = 1'b0;
end 
// a[ 12 ]
initial
begin
	a[12] = 1'b0;
end 
// a[ 11 ]
initial
begin
	a[11] = 1'b0;
end 
// a[ 10 ]
initial
begin
	a[10] = 1'b0;
end 
// a[ 9 ]
initial
begin
	a[9] = 1'b0;
end 
// a[ 8 ]
initial
begin
	a[8] = 1'b0;
end 
// a[ 7 ]
initial
begin
	a[7] = 1'b0;
end 
// a[ 6 ]
initial
begin
	a[6] = 1'b0;
end 
// a[ 5 ]
initial
begin
	a[5] = 1'b0;
end 
// a[ 4 ]
initial
begin
	a[4] = 1'b0;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
end 
// a[ 1 ]
initial
begin
	a[1] = 1'b0;
end 
// a[ 0 ]
initial
begin
	a[0] = 1'b0;
end 
// b[ 63 ]
initial
begin
	b[63] = 1'b1;
	b[63] = #100000 1'b0;
end 
// b[ 62 ]
initial
begin
	b[62] = 1'b0;
end 
// b[ 61 ]
initial
begin
	b[61] = 1'b0;
end 
// b[ 60 ]
initial
begin
	b[60] = 1'b0;
end 
// b[ 59 ]
initial
begin
	b[59] = 1'b0;
end 
// b[ 58 ]
initial
begin
	b[58] = 1'b0;
end 
// b[ 57 ]
initial
begin
	b[57] = 1'b0;
end 
// b[ 56 ]
initial
begin
	b[56] = 1'b0;
end 
// b[ 55 ]
initial
begin
	b[55] = 1'b0;
end 
// b[ 54 ]
initial
begin
	b[54] = 1'b0;
end 
// b[ 53 ]
initial
begin
	b[53] = 1'b0;
end 
// b[ 52 ]
initial
begin
	b[52] = 1'b0;
end 
// b[ 51 ]
initial
begin
	b[51] = 1'b0;
end 
// b[ 50 ]
initial
begin
	b[50] = 1'b0;
end 
// b[ 49 ]
initial
begin
	b[49] = 1'b0;
end 
// b[ 48 ]
initial
begin
	b[48] = 1'b0;
end 
// b[ 47 ]
initial
begin
	b[47] = 1'b0;
end 
// b[ 46 ]
initial
begin
	b[46] = 1'b0;
end 
// b[ 45 ]
initial
begin
	b[45] = 1'b0;
end 
// b[ 44 ]
initial
begin
	b[44] = 1'b0;
end 
// b[ 43 ]
initial
begin
	b[43] = 1'b0;
end 
// b[ 42 ]
initial
begin
	b[42] = 1'b0;
end 
// b[ 41 ]
initial
begin
	b[41] = 1'b0;
end 
// b[ 40 ]
initial
begin
	b[40] = 1'b0;
end 
// b[ 39 ]
initial
begin
	b[39] = 1'b0;
end 
// b[ 38 ]
initial
begin
	b[38] = 1'b0;
end 
// b[ 37 ]
initial
begin
	b[37] = 1'b0;
end 
// b[ 36 ]
initial
begin
	b[36] = 1'b0;
end 
// b[ 35 ]
initial
begin
	b[35] = 1'b0;
end 
// b[ 34 ]
initial
begin
	b[34] = 1'b0;
end 
// b[ 33 ]
initial
begin
	b[33] = 1'b0;
end 
// b[ 32 ]
initial
begin
	b[32] = 1'b0;
end 
// b[ 31 ]
initial
begin
	b[31] = 1'b0;
end 
// b[ 30 ]
initial
begin
	b[30] = 1'b0;
end 
// b[ 29 ]
initial
begin
	b[29] = 1'b0;
end 
// b[ 28 ]
initial
begin
	b[28] = 1'b0;
end 
// b[ 27 ]
initial
begin
	b[27] = 1'b0;
end 
// b[ 26 ]
initial
begin
	b[26] = 1'b0;
end 
// b[ 25 ]
initial
begin
	b[25] = 1'b0;
end 
// b[ 24 ]
initial
begin
	b[24] = 1'b0;
end 
// b[ 23 ]
initial
begin
	b[23] = 1'b0;
end 
// b[ 22 ]
initial
begin
	b[22] = 1'b0;
end 
// b[ 21 ]
initial
begin
	b[21] = 1'b0;
end 
// b[ 20 ]
initial
begin
	b[20] = 1'b0;
end 
// b[ 19 ]
initial
begin
	b[19] = 1'b0;
end 
// b[ 18 ]
initial
begin
	b[18] = 1'b0;
end 
// b[ 17 ]
initial
begin
	b[17] = 1'b0;
end 
// b[ 16 ]
initial
begin
	b[16] = 1'b0;
end 
// b[ 15 ]
initial
begin
	b[15] = 1'b0;
end 
// b[ 14 ]
initial
begin
	b[14] = 1'b0;
end 
// b[ 13 ]
initial
begin
	b[13] = 1'b0;
end 
// b[ 12 ]
initial
begin
	b[12] = 1'b0;
end 
// b[ 11 ]
initial
begin
	b[11] = 1'b0;
end 
// b[ 10 ]
initial
begin
	b[10] = 1'b0;
end 
// b[ 9 ]
initial
begin
	b[9] = 1'b0;
end 
// b[ 8 ]
initial
begin
	b[8] = 1'b0;
end 
// b[ 7 ]
initial
begin
	b[7] = 1'b0;
end 
// b[ 6 ]
initial
begin
	b[6] = 1'b0;
end 
// b[ 5 ]
initial
begin
	b[5] = 1'b0;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
end 

// cin
initial
begin
	cin = 1'b0;
end 

adder64_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.cin(cin),
	.sampler_tx(sampler)
);

adder64_vlg_check_tst tb_out(
	.cout(cout),
	.sum(sum),
	.sampler_rx(sampler)
);
endmodule

